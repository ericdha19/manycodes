// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var temperatures = Temperatures.FromJson(jsonString);

namespace Twin2Twin.Common
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Elevator
    {
        [JsonProperty("TwinId")]
        public string TwinId { get; set; }

        [JsonProperty("DeviceId")]
        public string DeviceId { get; set; }

        [JsonProperty("UnitId")]
        public string UnitId { get; set; }

        [JsonProperty("Nickname")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Nickname { get; set; }

        [JsonProperty("TenantId")]
        public string TenantId { get; set; }

        [JsonProperty("Region")]
        public string Region { get; set; }

        [JsonProperty("BranchName")]
        public string BranchName { get; set; }

        [JsonProperty("BranchNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long BranchNumber { get; set; }

        [JsonProperty("SupervisorName")]
        public string SupervisorName { get; set; }

        [JsonProperty("Supervisor8id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Supervisor8Id { get; set; }

        [JsonProperty("MaintenanceRoute")]
        public string MaintenanceRoute { get; set; }

        [JsonProperty("BuildingId")]
        public long BuildingId { get; set; }

        [JsonProperty("BuildingAddr1")]
        public string BuildingAddr1 { get; set; }

        [JsonProperty("BuildingAddr2")]
        public string BuildingAddr2 { get; set; }

        [JsonProperty("BuildingCity")]
        public string BuildingCity { get; set; }

        [JsonProperty("BuildingName")]
        public string BuildingName { get; set; }

        [JsonProperty("ZipCode")]
        public string ZipCode { get; set; }

        [JsonProperty("BuildingState")]
        public string BuildingState { get; set; }

        [JsonProperty("CountryCode")]
        public string CountryCode { get; set; }

        [JsonProperty("Longitude")]
        public string Longitude { get; set; }

        [JsonProperty("Latitude")]
        public string Latitude { get; set; }

        [JsonProperty("TwinType")]
        public string TwinType { get; set; }

        [JsonProperty("TwinModelVersion")]
        public string TwinModelVersion { get; set; }

        [JsonProperty("Timezone")]
        public string Timezone { get; set; }

        [JsonProperty("IsBlacklisted")]
        public long IsBlacklisted { get; set; }

        [JsonProperty("IsRealtimeUnit")]
        public long IsRealtimeUnit { get; set; }

        [JsonProperty("IsMaxUnit")]
        public long IsMaxUnit { get; set; }

        [JsonProperty("ControllerType")]
        public string ControllerType { get; set; }

        [JsonProperty("ControllerTypeName")]
        public string ControllerTypeName { get; set; }

        [JsonProperty("MaxBoxSoftwareVersion")]
        public string MaxBoxSoftwareVersion { get; set; }

        [JsonProperty("ControllerSoftwareVersion")]
        public string ControllerSoftwareVersion { get; set; }

        [JsonProperty("ContractTypeDescription")]
        public string ContractTypeDescription { get; set; }

        [JsonProperty("PmVisits")]
        public long PmVisits { get; set; }

        [JsonProperty("Sn")]
        public long Sn { get; set; }

        [JsonProperty("MessageType")]
        public long MessageType { get; set; }

        [JsonProperty("ChangeTriggeredBy")]
        public string ChangeTriggeredBy { get; set; }

        [JsonProperty("Finalized")]
        public DateTimeOffset Finalized { get; set; }

        [JsonProperty("FinalizedLocal")]
        public DateTimeOffset FinalizedLocal { get; set; }

        [JsonProperty("FinalizedLocalHour")]
        public long FinalizedLocalHour { get; set; }

        [JsonProperty("FinalizedLocalDayOfWeek")]
        public long FinalizedLocalDayOfWeek { get; set; }

        [JsonProperty("CloudGatewayEnqueuedUtcTime")]
        public DateTimeOffset CloudGatewayEnqueuedUtcTime { get; set; }

        [JsonProperty("DigitalPosition")]
        public long DigitalPosition { get; set; }

        [JsonProperty("NumberOfStops")]
        public long NumberOfStops { get; set; }

        [JsonProperty("CurrentFloor")]
        public long CurrentFloor { get; set; }

        [JsonProperty("LastOperationalSequenceDetected")]
        public DateTimeOffset LastOperationalSequenceDetected { get; set; }

        [JsonProperty("OperationalSequenceDetected")]
        public DateTimeOffset OperationalSequenceDetected { get; set; }

        [JsonProperty("LastProcessedTime")]
        public DateTimeOffset LastProcessedTime { get; set; }

        [JsonProperty("LastEquipmentStatus")]
        public string LastEquipmentStatus { get; set; }

        [JsonProperty("LastEquipmentStatusSince")]
        public DateTimeOffset LastEquipmentStatusSince { get; set; }

        [JsonProperty("EquipmentStatus")]
        public string EquipmentStatus { get; set; }

        [JsonProperty("EquipmentStatusSince")]
        public DateTimeOffset EquipmentStatusSince { get; set; }

        [JsonProperty("LastEquipmentSpecificStatus")]
        public string LastEquipmentSpecificStatus { get; set; }

        [JsonProperty("LastEquipmentSpecificStatusSince")]
        public DateTimeOffset LastEquipmentSpecificStatusSince { get; set; }

        [JsonProperty("EquipmentSpecificStatus")]
        public string EquipmentSpecificStatus { get; set; }

        [JsonProperty("EquipmentSpecificStatusSince")]
        public DateTimeOffset EquipmentSpecificStatusSince { get; set; }

        [JsonProperty("EquipmentStatusNonMax")]
        public string EquipmentStatusNonMax { get; set; }

        [JsonProperty("EquipmentStatusNonMaxSince")]
        public DateTimeOffset EquipmentStatusNonMaxSince { get; set; }

        [JsonProperty("LastConnectivityStatus")]
        public string LastConnectivityStatus { get; set; }

        [JsonProperty("LastConnectivityStatusSince")]
        public DateTimeOffset LastConnectivityStatusSince { get; set; }

        [JsonProperty("ConnectivityStatus")]
        public string ConnectivityStatus { get; set; }

        [JsonProperty("ConnectivityStatusSince")]
        public DateTimeOffset ConnectivityStatusSince { get; set; }

        [JsonProperty("ServiceModeStatus")]
        public ServiceModeStatus ServiceModeStatus { get; set; }

        [JsonProperty("OpModeId")]
        public long OpModeId { get; set; }

        [JsonProperty("OpModeStatus")]
        public OpModeStatus OpModeStatus { get; set; }

        [JsonProperty("OpModeCreated")]
        public DateTimeOffset OpModeCreated { get; set; }

        [JsonProperty("OpModeDigitalPosition")]
        public long OpModeDigitalPosition { get; set; }

        [JsonProperty("OpModeDescription")]
        public string OpModeDescription { get; set; }

        [JsonProperty("IsOutService")]
        public long IsOutService { get; set; }

        [JsonProperty("IsUnitAvailable")]
        public long IsUnitAvailable { get; set; }

        [JsonProperty("UnitAvailableSince")]
        public DateTimeOffset UnitAvailableSince { get; set; }

        [JsonProperty("IoTHubConnectivityStatus")]
        public string IoTHubConnectivityStatus { get; set; }

        [JsonProperty("LastIotHubConnectionCreated")]
        public DateTimeOffset LastIotHubConnectionCreated { get; set; }

        [JsonProperty("BlueBoxMessageCreated")]
        public DateTimeOffset BlueBoxMessageCreated { get; set; }

        [JsonProperty("BlueBoxMessageDescription")]
        public string BlueBoxMessageDescription { get; set; }

        [JsonProperty("BlueBoxMessageCommunicationCreated")]
        public DateTimeOffset BlueBoxMessageCommunicationCreated { get; set; }

        [JsonProperty("BlueBoxMessageCommunicationDescription")]
        public string BlueBoxMessageCommunicationDescription { get; set; }

        [JsonProperty("CurrentAlerts")]
        public List<object> CurrentAlerts { get; set; }

        [JsonProperty("CurrentTickets")]
        public List<object> CurrentTickets { get; set; }

        [JsonProperty("CurrentRtSAlerts")]
        public List<object> CurrentRtSAlerts { get; set; }

        [JsonProperty("CallTypeId")]
        public long CallTypeId { get; set; }

        [JsonProperty("CallTypeDescription")]
        public string CallTypeDescription { get; set; }

        [JsonProperty("CallDirectionId")]
        public long CallDirectionId { get; set; }

        [JsonProperty("CallDirection")]
        public string CallDirection { get; set; }

        [JsonProperty("CallFloorCalledFrom")]
        public long CallFloorCalledFrom { get; set; }

        [JsonProperty("CallDoorSideCalledFrom")]
        public long CallDoorSideCalledFrom { get; set; }

        [JsonProperty("CallFloorDestination")]
        public long CallFloorDestination { get; set; }

        [JsonProperty("CallDoorSideDestination")]
        public long CallDoorSideDestination { get; set; }

        [JsonProperty("CallSubmitted")]
        public DateTimeOffset CallSubmitted { get; set; }

        [JsonProperty("CallCompleted")]
        public DateTimeOffset CallCompleted { get; set; }

        [JsonProperty("DoorFrontStartStateId")]
        public long DoorFrontStartStateId { get; set; }

        [JsonProperty("DoorFrontStartState")]
        public string DoorFrontStartState { get; set; }

        [JsonProperty("DoorFrontEndStateId")]
        public long DoorFrontEndStateId { get; set; }

        [JsonProperty("DoorFrontEndState")]
        public string DoorFrontEndState { get; set; }

        [JsonProperty("DoorRearStartStateId")]
        public long DoorRearStartStateId { get; set; }

        [JsonProperty("DoorRearStartState")]
        public string DoorRearStartState { get; set; }

        [JsonProperty("DoorRearEndStateId")]
        public long DoorRearEndStateId { get; set; }

        [JsonProperty("DoorRearEndState")]
        public string DoorRearEndState { get; set; }

        [JsonProperty("DoorCreated")]
        public DateTimeOffset DoorCreated { get; set; }

        [JsonProperty("DoorCompleted")]
        public DateTimeOffset DoorCompleted { get; set; }

        [JsonProperty("DoorFrontStop")]
        public long DoorFrontStop { get; set; }

        [JsonProperty("DoorFrontSubmitted")]
        public DateTimeOffset DoorFrontSubmitted { get; set; }

        [JsonProperty("DoorFrontCompleted")]
        public DateTimeOffset DoorFrontCompleted { get; set; }

        [JsonProperty("DoorRearStop")]
        public long DoorRearStop { get; set; }

        [JsonProperty("DoorRearSubmitted")]
        public DateTimeOffset DoorRearSubmitted { get; set; }

        [JsonProperty("DoorRearCompleted")]
        public DateTimeOffset DoorRearCompleted { get; set; }

        [JsonProperty("ErrorCodeId")]
        public long ErrorCodeId { get; set; }

        [JsonProperty("NearestStop")]
        public long NearestStop { get; set; }

        [JsonProperty("NearestStopName")]
        public string NearestStopName { get; set; }

        [JsonProperty("NearestFloor")]
        public long NearestFloor { get; set; }

        [JsonProperty("NearestFloorName")]
        public string NearestFloorName { get; set; }

        [JsonProperty("ErrorCodeCreated")]
        public DateTimeOffset ErrorCodeCreated { get; set; }

        [JsonProperty("ErrorDescription")]
        public string ErrorDescription { get; set; }

        [JsonProperty("ErrorDigitalPosition")]
        public long ErrorDigitalPosition { get; set; }

        [JsonProperty("TripSubmitted")]
        public DateTimeOffset TripSubmitted { get; set; }

        [JsonProperty("TripCompleted")]
        public DateTimeOffset TripCompleted { get; set; }

        [JsonProperty("StartFloor")]
        public long StartFloor { get; set; }

        [JsonProperty("StartFloorName")]
        public string StartFloorName { get; set; }

        [JsonProperty("EndFloor")]
        public long EndFloor { get; set; }

        [JsonProperty("EndFloorName")]
        public string EndFloorName { get; set; }

        [JsonProperty("LastTripSubmitted")]
        public DateTimeOffset LastTripSubmitted { get; set; }

        [JsonProperty("LastTripCompleted")]
        public DateTimeOffset LastTripCompleted { get; set; }

        [JsonProperty("LastStartFloor")]
        public long LastStartFloor { get; set; }

        [JsonProperty("LastEndFloor")]
        public long LastEndFloor { get; set; }

        [JsonProperty("Counters")]
        public Counters Counters { get; set; }

        [JsonProperty("ReferenceCounters")]
        public ReferenceCounters ReferenceCounters { get; set; }

        [JsonProperty("Latencies")]
        public Latencies Latencies { get; set; }

        [JsonProperty("UsageBucket")]
        public string UsageBucket { get; set; }

        [JsonProperty("ProvisioningStatus")]
        public string ProvisioningStatus { get; set; }

        [JsonProperty("ProvisioningStatusChanged")]
        public DateTimeOffset ProvisioningStatusChanged { get; set; }

        [JsonProperty("PartitionId")]
        public long PartitionId { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("PartitionKey")]
        public string PartitionKey { get; set; }

        [JsonProperty("ChangeLog")]
        public List<object> ChangeLog { get; set; }

        [JsonProperty("_etag")]
        public string Etag { get; set; }

        [JsonProperty("_self")]
        public string Self { get; set; }

        [JsonProperty("_rid")]
        public string Rid { get; set; }

        [JsonProperty("_attachments")]
        public string Attachments { get; set; }

        [JsonProperty("_ts")]
        public long Ts { get; set; }
    }

    public partial class Counters
    {
        [JsonProperty("Trips")]
        public long Trips { get; set; }

        [JsonProperty("Relevels")]
        public long Relevels { get; set; }

        [JsonProperty("DoorMovements")]
        public long DoorMovements { get; set; }

        [JsonProperty("ErrorCodes")]
        public long ErrorCodes { get; set; }

        [JsonProperty("OpModes")]
        public long OpModes { get; set; }

        [JsonProperty("BlueBoxMessages")]
        public long BlueBoxMessages { get; set; }

        [JsonProperty("LastReset")]
        public DateTimeOffset LastReset { get; set; }
    }

    public partial class Latencies
    {
        [JsonProperty("DeviceToIoTHubLatencyMilliseconds")]
        public long DeviceToIoTHubLatencyMilliseconds { get; set; }

        [JsonProperty("IoTHubToHarmonizeEnrichRealtimeEventHubLatencyMilliseconds")]
        public long IoTHubToHarmonizeEnrichRealtimeEventHubLatencyMilliseconds { get; set; }

        [JsonProperty("HarmonizeEnrichRealtimeEventHubToRealtimeTwinStateCosmosDBCollectionLatencyMilliseconds")]
        public long HarmonizeEnrichRealtimeEventHubToRealtimeTwinStateCosmosDbCollectionLatencyMilliseconds { get; set; }

        [JsonProperty("IoTHubToRealtimeTwinStateCosmosDBCollectionLatencyMilliseconds")]
        public long IoTHubToRealtimeTwinStateCosmosDbCollectionLatencyMilliseconds { get; set; }

        [JsonProperty("DeviceToRealtimeTwinStateCosmosDBCollectionLatencyMilliseconds")]
        public long DeviceToRealtimeTwinStateCosmosDbCollectionLatencyMilliseconds { get; set; }

        [JsonProperty("EventMessageType")]
        public long EventMessageType { get; set; }

        [JsonProperty("EventType")]
        public string EventType { get; set; }

        [JsonProperty("EventSn")]
        public long EventSn { get; set; }

        [JsonProperty("EventFinalized")]
        public DateTimeOffset EventFinalized { get; set; }
    }

    public partial class OpModeStatus
    {
        [JsonProperty("IsOutOfService")]
        public long IsOutOfService { get; set; }

        [JsonProperty("IsFaultMode")]
        public long IsFaultMode { get; set; }

        [JsonProperty("IsSafetyStringOpen")]
        public long IsSafetyStringOpen { get; set; }

        [JsonProperty("IsNormalMode")]
        public long IsNormalMode { get; set; }

        [JsonProperty("IsNormalModeUpdated")]
        public DateTimeOffset IsNormalModeUpdated { get; set; }

        [JsonProperty("IsNormalModeStart")]
        public DateTimeOffset IsNormalModeStart { get; set; }

        [JsonProperty("LastNormalModeStart")]
        public DateTimeOffset LastNormalModeStart { get; set; }

        [JsonProperty("LastNormalModeEnd")]
        public DateTimeOffset LastNormalModeEnd { get; set; }

        [JsonProperty("IsInspectionMode")]
        public long IsInspectionMode { get; set; }

        [JsonProperty("IsCaseOfFire")]
        public long IsCaseOfFire { get; set; }

        [JsonProperty("IsFirefighterOperation")]
        public long IsFirefighterOperation { get; set; }

        [JsonProperty("IsEmergency")]
        public long IsEmergency { get; set; }

        [JsonProperty("IsIndependent")]
        public long IsIndependent { get; set; }

        [JsonProperty("IsSeismicMode")]
        public long IsSeismicMode { get; set; }

        [JsonProperty("IsEmergencyPowerOpMode")]
        public long IsEmergencyPowerOpMode { get; set; }

        [JsonProperty("IsMAXVoiceEnabled")]
        public long IsMaxVoiceEnabled { get; set; }

        [JsonProperty("IsUnknown")]
        public long IsUnknown { get; set; }

        [JsonProperty("IsUnknownUpdated")]
        public DateTimeOffset IsUnknownUpdated { get; set; }

        [JsonProperty("LastUnknownStart")]
        public DateTimeOffset LastUnknownStart { get; set; }

        [JsonProperty("LastUnknownEnd")]
        public DateTimeOffset LastUnknownEnd { get; set; }
    }

    public partial class ReferenceCounters
    {
        [JsonProperty("ImportTimestamp")]
        public DateTimeOffset ImportTimestamp { get; set; }

        [JsonProperty("ReferenceCountersHour")]
        public List<ReferenceCountersDayElement> ReferenceCountersHour { get; set; }

        [JsonProperty("ReferenceCountersDay")]
        public List<ReferenceCountersDayElement> ReferenceCountersDay { get; set; }
    }

    public partial class ReferenceCountersDayElement
    {
        [JsonProperty("LocalDayOfWeek")]
        public long LocalDayOfWeek { get; set; }

        [JsonProperty("AvgNumTrips")]
        public long AvgNumTrips { get; set; }

        [JsonProperty("AvgNumRelevels")]
        public long AvgNumRelevels { get; set; }

        [JsonProperty("AvgNumDoorMovements")]
        public long AvgNumDoorMovements { get; set; }

        [JsonProperty("LocalHourOfDay", NullValueHandling = NullValueHandling.Ignore)]
        public long? LocalHourOfDay { get; set; }
    }

    public partial class ServiceModeStatus
    {
        [JsonProperty("IsInServiceMode")]
        public long IsInServiceMode { get; set; }

        [JsonProperty("IsInLongtermServiceMode")]
        public long IsInLongtermServiceMode { get; set; }
    }

    public partial class Elevator
    {
        public static Elevator FromJson(string json) => JsonConvert.DeserializeObject<Elevator>(json);
    }

    public static class Serialize
    {
        public static string ToJson(this Elevator self) => JsonConvert.SerializeObject(self);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            //return value;
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (string)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
